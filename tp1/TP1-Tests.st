TestCase subclass: #PruebasAgenda	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 02:37'!test06AgendaAgregarEventoSimpleYVerificarQueExiste	| agenda persona recurso semanas nombreEvento invitados anio mes dia hora |		agenda := Agenda new.	persona := 'Alfonso'.	recurso := 'Cama'.	nombreEvento := 'Siesta'.	invitados := OrderedCollection with: persona with: recurso.	semanas := 1.	anio:= 2018.	mes := 10.	dia := 12.	hora := 15.		agenda agregarPersona: persona.	agenda agregarRecurso: recurso.	agenda agregarUnEventoConNombre: nombreEvento 	       invitados: invitados 	       semanas: semanas 	       enAnio: anio	       mes: mes 	       dia: dia	       hora: hora.		self assert: ( agenda existeEvento: nombreEvento ).	self assert: ( agenda estaOcupado: persona enAnio: anio mes: mes dia: dia hora: hora ).	self assert: ( agenda estaOcupado: recurso enAnio: anio mes: mes dia: dia hora: hora ).! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 9/29/2018 12:42'!test01AgendaVerificarQueNoExistePersona	| agenda persona |		agenda := Agenda new.	persona := 'Pablo'.		self deny: ( agenda existePersona: persona ).! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 12:40'!test08AgendaRemoverUnEventoQueNoExisteLanzaUnaExcepcion	| agenda nombreEvento |		agenda := Agenda new.	nombreEvento := 'Almuerzo familiar'.		self should: [ agenda removerEvento: nombreEvento ] raise: NoExisteEventoError! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 9/29/2018 12:42'!test03AgendaVerificarQueNoExisteRecurso	| agenda recurso |		agenda := Agenda new.	recurso := 'Parrilla'.		self deny: ( agenda existeRecurso: recurso ).! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 12:47'!test12AgendaAgregarCincoRecursosYVerificarQueAlSextoRecursoQueSeQuiereAgregarLanzaUnaExcepcion	| agenda |		agenda := Agenda new.		agenda agregarRecurso: 'Parrila'; agregarRecurso: 'Cama'; agregarRecurso: 'Proyector'; agregarRecurso: 'Aula 203'; agregarRecurso: 'Aula 221'.		self should: [ agenda agregarRecurso: 'Aula 200' ] raise: CapacidadMaximaDeRecursosError! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 12:46'!test11AgendaAgregarALaMismaPersonaDosVecesYVerificarQueEnLaSegundaVezLanzaUnaExcepcion	| agenda persona |		persona := 'Maria'.	agenda := Agenda new.		agenda agregarPersona: persona.		self should: [ agenda agregarPersona: persona ] raise: PersonaYaExistenteError	! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 03:52'!test07AgendaAgregarEventoSemanalVerificarQueExisteYQueLasPersonasYElRecursoEstenOcupadas	| agenda persona recurso invitados semanas nombreEvento anio mes dia hora |		agenda := Agenda new.	semanas := 3.	persona := 'Leonel'.	recurso := 'Game of Thrones: A Dance with Dragons'.	invitados := OrderedCollection with: persona with: recurso.	nombreEvento := 'Leer Game of Thrones'.	anio := 2018.	mes := 9.	dia := 6.	hora := 15.		agenda agregarPersona: persona.	agenda agregarRecurso: recurso.	agenda agregarUnEventoConNombre: nombreEvento 	       invitados: invitados 	       semanas: semanas 	       enAnio: anio	       mes: mes 	       dia: dia	       hora: hora.		self assert: ( agenda existeEvento: nombreEvento ).		self assert: ( agenda estaOcupado: persona enAnio: anio mes: mes dia: dia hora: hora ). 	self assert: ( agenda estaOcupado: persona enAnio: anio mes: mes dia: 13 hora: hora ).	self assert: ( agenda estaOcupado: persona enAnio: anio mes: mes dia: 20 hora: hora ).    		self assert: ( agenda estaOcupado: recurso enAnio: anio mes: mes dia: dia hora: hora ).	self assert: ( agenda estaOcupado: recurso enAnio: anio mes: mes dia: 13 hora: hora ).	self assert: ( agenda estaOcupado: recurso enAnio: anio mes: mes dia: 20 hora: hora ).! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 02:37'!test13AgendaAgregarAlMismoRecursoDosVecesYVerificarQueEnLaSegundaVezLanzaUnaExcepcion	| agenda recurso |		recurso := 'Computadora'.	agenda := Agenda new.		agenda agregarRecurso: recurso.		self should: [ agenda agregarRecurso: recurso ] raise: RecursoYaExistenteError! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 12:48'!test05AgendaVerificarQueNoExisteEvento	| agenda nombreEvento |		agenda := Agenda new.	nombreEvento := 'Partido de futbol'.		self deny: ( agenda existeEvento: nombreEvento )! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 9/29/2018 13:20'!test02AgendaAgregarPersonaYVerificarQueExiste	| agenda persona |		agenda := Agenda new.	persona := 'Gabriel'.		agenda agregarPersona: persona.		self assert: ( agenda existePersona: persona ).! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 12:46'!test10AgendaAgregarCincoPersonasYVerificarQueALaSextaPersonaQueSeQuiereAgregarLanzaUnaExcepcion	| agenda |		agenda := Agenda new.		agenda agregarPersona: 'Juan'; agregarPersona: 'Pedro'; agregarPersona: 'Julian'; agregarPersona: 'Matias'; agregarPersona: 'Manuel'.		self should: [ agenda agregarPersona: 'Barbara' ] raise: CapacidadMaximaDePersonasError.! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 9/29/2018 13:21'!test04AgendaAgregarRecursoYVerificarQueExiste	| agenda recurso |		agenda := Agenda new.	recurso := 'Cama'.		agenda agregarRecurso: recurso.		self assert: ( agenda existeRecurso: recurso ).! !!PruebasAgenda methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 02:35'!test09AgendaAgregarUnEventoSimpleVerificarQueExisteRemoverloYVerificarQueNoExiste	| agenda semanas nombreEvento invitados anio mes dia hora |		agenda := Agenda new.	agenda agregarPersona: 'Carolina'.	agenda agregarPersona: 'Lucas'.	agenda agregarPersona: 'Julian'.	agenda agregarPersona: 'Belen'.	nombreEvento := 'Partida de truco'.	invitados := OrderedCollection with: 'Carolina' with: 'Lucas' with: 'Julian' with: 'Belen'.	semanas := 1.	anio:= 2018.	mes := 7.	dia := 19.	hora := 15.		agenda agregarUnEventoConNombre: nombreEvento 	       invitados: invitados 	       semanas: semanas 	       enAnio: anio	       mes: mes 	       dia: dia	       hora: hora.		self assert: ( agenda existeEvento: nombreEvento ).	self assert: ( agenda estaOcupado: 'Carolina' enAnio: anio mes: mes dia: dia hora: hora ).	self assert: ( agenda estaOcupado: 'Belen' enAnio: anio mes: mes dia: dia hora: hora ).	self assert: ( agenda estaOcupado: 'Julian' enAnio: anio mes: mes dia: dia hora: hora ).	self assert: ( agenda estaOcupado: 'Lucas' enAnio: anio mes: mes dia: dia hora: hora ).		agenda removerEvento: nombreEvento.		self deny: ( agenda existeEvento: nombreEvento ).	self deny: ( agenda estaOcupado: 'Carolina' enAnio: anio mes: mes dia: dia hora: hora ).	self deny: ( agenda estaOcupado: 'Belen' enAnio: anio mes: mes dia: dia hora: hora ).	self deny: ( agenda estaOcupado: 'Julian' enAnio: anio mes: mes dia: dia hora: hora ).	self deny: ( agenda estaOcupado: 'Lucas' enAnio: anio mes: mes dia: dia hora: hora ). ! !TestCase subclass: #PruebasCalendario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 10:59'!test03CalendarioAgregarCincoRecursosYVerificarQueAlAgregarElSextoSeLanzaUnaExcepcion	| calendario |		calendario := Calendario new.	calendario agregarRecurso: 'Parrilla'; agregarRecurso: 'Cama'; agregarRecurso: 'Computadora'; agregarRecurso: 'Proyector'; agregarRecurso: 'Vaso'.		self should: [ calendario agregarRecurso: 'Tostadora' ] raise: CapacidadMaximaDeRecursosError. ! !!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/15/2018 17:59'!test05CalendarioAgregarEventoSimpleConMismoNombreYDistinaFecha	| calendario |		calendario := Calendario new.		calendario agregarPersona: 'Paula'.	calendario agregarPersona: 'Gaston'.		calendario agregarRecurso: 'Mesa 20 del restaurante'.		calendario agregarEventoConNombre: 'Cena matrimonial'	           invitados: #('Paula' 'Gaston' 'Mesa 20 del restaurante')	           enAnio: 2018 	           mes: 3	           dia: 30 	           hora: 21.		self assert: ( calendario estaOcupado: 'Paula' enAnio: 2018 mes: 3 dia: 30 hora: 21 ).	self assert: ( calendario estaOcupado: 'Gaston' enAnio: 2018 mes: 3 dia: 30 hora: 21 ).		calendario agregarEventoConNombre: 'Cena matrimonial'	           invitados: #('Paula' 'Gaston' 'Mesa 20 del restaurante')	           enAnio: 2018 	           mes: 6	           dia: 21 	           hora: 22.		self assert: ( calendario estaOcupado: 'Paula' enAnio: 2018 mes: 6 dia: 21 hora: 22 ).	self assert: ( calendario estaOcupado: 'Gaston' enAnio: 2018 mes: 6 dia: 21 hora: 22 ).! !!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/15/2018 17:59'!test08CalendarioRemoverEventoQueNoExiste	| calendario |		calendario := Calendario new.		calendario agregarPersona: 'Roberto'.	calendario agregarPersona: 'Alejandra'.		calendario agregarRecurso: 'Departamento en mardel'.		calendario agregarEventoConNombre: 'Vacaciones en mardel' 	           invitados: #('Roberto' 'Alejandra' 'Departamento en mardel') 	           enAnio: 2019 	           mes: 1 	           dia: 10 	           hora: 6.		self assert: ( calendario estaOcupado: 'Roberto' enAnio: 2019 mes: 1 dia: 10 hora: 6 ).	self assert: ( calendario estaOcupado: 'Alejandra' enAnio: 2019 mes: 1 dia: 10 hora: 6 ).	self assert: ( calendario estaOcupado: 'Departamento en mardel' enAnio: 2019 mes: 1 dia: 10 hora: 6 ).		self should: [ calendario removerEvento: 'Cena con amigos' ] raise: NoExisteEventoError. 	! !!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 11:01'!test04CalendarioAgregarDosVecesElMismoRecursoLanzaUnaExcepcion	| calendario recurso |		calendario := Calendario new.	recurso := 'Aula 2013'.		calendario agregarRecurso: recurso.		self should: [ calendario agregarRecurso: recurso ] raise: RecursoYaExistenteError.  	! !!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/15/2018 17:59'!test07CalendarioAgregarEventoSemanalConSemanasNegativasYCero	| calendario |		calendario := Calendario new.		calendario agregarPersona: 'Pablo'.		calendario agregarRecurso: 'Cama'.		self should: [ calendario agregarEventoSemanalConNombre: 'Siesta' 		                       semanas: -2 		                       invitados: #('Pablo' 'Cama') 		                       enAnio: 2018 		                       mes: 3 		                       dia: 29 		                       hora: 14 ] raise: CantidadDeSemanasInvalidasError.		self should: [ calendario agregarEventoSemanalConNombre: 'Siesta' 		                       semanas: 0 		                       invitados: #('Pablo' 'Cama') 		                       enAnio: 2018 		                       mes: 3 		                       dia: 29 		                       hora: 14 ] raise: CantidadDeSemanasInvalidasError.  ! !!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/15/2018 17:59'!test06CalendarioAgregarVariosEventosSimplesYLuegoRemoverlos	| calendario |		calendario := Calendario new.		calendario agregarPersona: 'Martin'.	calendario agregarPersona: 'Sofia'.		calendario agregarRecurso: 'Proyector'.		calendario agregarEventoConNombre: 'Siesta' 	           invitados: #('Martin') 	           enAnio: 2018 	           mes: 8 	           dia: 20 	           hora: 15. 		calendario agregarEventoConNombre: 'Clase' 	           invitados: #('Martin' 'Sofia' 'Proyector') 	           enAnio: 2018 	           mes: 3 	           dia: 16 	           hora: 18. 		calendario agregarEventoConNombre: 'Cine casero' 	           invitados: #('Martin' 'Sofia' 'Proyector') 	           enAnio: 2018 	           mes: 10 	           dia: 6 	           hora: 23. 		self assert: ( calendario estaOcupado: 'Martin' enAnio: 2018 mes: 8 dia: 20 hora: 15 ).	self assert: ( calendario estaOcupado: 'Martin' enAnio: 2018 mes: 3 dia: 16 hora: 18 ).	self assert: ( calendario estaOcupado: 'Martin' enAnio: 2018 mes: 10 dia: 6 hora: 23 ).	self assert: ( calendario estaOcupado: 'Sofia' enAnio: 2018 mes: 3 dia: 16 hora: 18 ).	self assert: ( calendario estaOcupado: 'Sofia' enAnio: 2018 mes: 10 dia: 6 hora: 23 ).	self assert: ( calendario estaOcupado: 'Proyector' enAnio: 2018 mes: 3 dia: 16 hora: 18 ).	self assert: ( calendario estaOcupado: 'Proyector' enAnio: 2018 mes: 10 dia: 6 hora: 23 ).		calendario removerEvento: 'Siesta'.	calendario removerEvento: 'Cine casero'.	calendario removerEvento: 'Clase'.		self deny: ( calendario estaOcupado: 'Martin' enAnio: 2018 mes: 8 dia: 20 hora: 15 ).	self deny: ( calendario estaOcupado: 'Martin' enAnio: 2018 mes: 3 dia: 16 hora: 18 ).	self deny: ( calendario estaOcupado: 'Martin' enAnio: 2018 mes: 10 dia: 6 hora: 23 ).	self deny: ( calendario estaOcupado: 'Sofia' enAnio: 2018 mes: 3 dia: 16 hora: 18 ).	self deny: ( calendario estaOcupado: 'Sofia' enAnio: 2018 mes: 10 dia: 6 hora: 23 ).	self deny: ( calendario estaOcupado: 'Proyector' enAnio: 2018 mes: 3 dia: 16 hora: 18 ).	self deny: ( calendario estaOcupado: 'Proyector' enAnio: 2018 mes: 10 dia: 6 hora: 23 ).! !!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/18/2018 01:44'!test11CalendarioAgregarEventosSimplesConMismaFechaYDistintoNombreYVerificarQueLosInvitadosSiguenOcupadosLuegoDeRemoverUnoDeEsosEventos	| calendario invitados |		invitados := #('Pedro' 'Juan' 'Guadalupe' 'Delfina').		calendario := Calendario new.		calendario agregarPersona: 'Juan'; agregarPersona: 'Pedro'; agregarPersona: 'Guadalupe'; agregarPersona: 'Delfina'.		calendario agregarEventoConNombre: 'Cine con amigos' 	invitados: invitados 	enAnio: 2018 	mes: 8 	dia: 6 	hora: 20.		calendario agregarEventoConNombre: 'Juntada' 	invitados: invitados 	enAnio: 2018 	mes: 8 	dia: 6 	hora: 20.		self assert: ( calendario estaOcupado: 'Juan' enAnio: 2018 mes: 8 dia: 6 hora: 20 ).	self assert: ( calendario estaOcupado: 'Pedro' enAnio: 2018 mes: 8 dia: 6 hora: 20 ).	self assert: ( calendario estaOcupado: 'Guadalupe' enAnio: 2018 mes: 8 dia: 6 hora: 20 ).	self assert: ( calendario estaOcupado: 'Delfina' enAnio: 2018 mes: 8 dia: 6 hora: 20 ).		calendario removerEvento: 'Cine con amigos'.		self assert: ( calendario estaOcupado: 'Juan' enAnio: 2018 mes: 8 dia: 6 hora: 20 ).	self assert: ( calendario estaOcupado: 'Pedro' enAnio: 2018 mes: 8 dia: 6 hora: 20 ).	self assert: ( calendario estaOcupado: 'Guadalupe' enAnio: 2018 mes: 8 dia: 6 hora: 20 ).	self assert: ( calendario estaOcupado: 'Delfina' enAnio: 2018 mes: 8 dia: 6 hora: 20 )! !!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 10:54'!test02CalendarioAgregarDosVecesLaMismaPersonaLanzaUnaExcepcion	| calendario persona |		calendario := Calendario new.	persona := 'Micaela'.		calendario agregarPersona: persona.		self should: [ calendario agregarPersona: persona ] raise: PersonaYaExistenteError. ! !!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 10:54'!test01CalendarioAgregarCincoPersonasYVerificarQueAlAgregarLaSextaSeLanzaUnaExcepcion	| calendario |		calendario := Calendario new.	calendario agregarPersona: 'Juana'; agregarPersona: 'Mateo'; agregarPersona: 'Leonel'; agregarPersona: 'Matias'; agregarPersona: 'Lara'.		self should: [ calendario agregarPersona: 'Isabel' ] raise: CapacidadMaximaDePersonasError. ! !!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/15/2018 18:15'!test09CalendarioNoExisteUnaPersonaQueNoSeAgrego	| calendario persona |		calendario := Calendario new.	persona := 'Alan'.		self deny: ( calendario existePersona: persona )! !!PruebasCalendario methodsFor: 'tests' stamp: 'MartinStefanelli 10/15/2018 18:18'!test10CalendarioNoExisteUnRecrusoQueNoSeAgrego	| calendario recurso |		calendario := Calendario new.	recurso := 'Cama'.		self deny: ( calendario existeRecurso: recurso )! !TestCase subclass: #PruebasEvento	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasEvento methodsFor: 'tests' stamp: 'MartinStefanelli 9/25/2018 23:52'!test01EventoPreguntarSiElNombreDeUnEventoEsElDeUnEventoVacioYVerificarQueNoEsAsi	| evento nombreEvento |		evento := Evento new.	nombreEvento := 'Siesta'.		self deny: ( evento esTuNombre: nombreEvento )! !!PruebasEvento methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:18'!test05EventoCrearUnEventoVacioEIrAgregandoSuNombreInvitadosAnioMesDiaYHoraYVerificarEsaEntrada	| evento nombreEvento invitados semanas anio mes dia hora fecha |		nombreEvento := 'Cena matrimonial'.	invitados := OrderedCollection with: 'Leonel' with: 'Camila'.	semanas := 1.	anio := 2018.	mes := 10.	dia := 31.	hora := 21.	fecha := '10-31-2018 21' asDateAndTime. 		evento := Evento new.	evento agregarNombre: nombreEvento. 	evento agregarInvitados: invitados.	evento agregarFechasConFormatoDeSemanas: semanas 	       anio: anio	       mes: mes 	       dia: dia 	       hora: hora.		self assert: ( evento esTuNombre: nombreEvento ).	self assert: ( evento estaInvitado: 'Camila' ).	self assert: ( evento esValidaLaFecha: fecha ).	self deny: ( evento esSemanal )! !!PruebasEvento methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 02:55'!test06EventoCrearUnEventoSemanalConNombreInvitadosAnioMesDiaYHoraYVerificarEsaEntrada	| evento nombreEvento invitados semanas anio mes dia hora fecha1 fecha2 fecha3 fecha4 |		nombreEvento := 'Cine'.	invitados := OrderedCollection with: 'Martin' with: 'Milena' with: 'Gaston' with: 'Daniela'.	semanas := 3.	anio := 2018.	mes := 12.	dia := 1.	hora := 15.	fecha1 := '12-1-2018 15' asDateAndTime. 	fecha2 := '12-8-2018 15' asDateAndTime.	fecha3 := '12-15-2018 15' asDateAndTime. 	fecha4 := '12-15-2018 14' asDateAndTime. 		evento := Evento conNombre: nombreEvento 	                 invitados: invitados	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		self deny: ( evento esTuNombre: 'Cena' ).	self assert: ( evento esTuNombre: nombreEvento ).		self deny: ( evento estaInvitado: 'Pepe' ).	self assert: ( evento estaInvitado: 'Gaston' ).		self deny: ( evento esValidaLaFecha: fecha4 ).	self assert: ( evento esValidaLaFecha: fecha3 ).	self assert: ( evento esValidaLaFecha: fecha2 ).	self assert: ( evento esValidaLaFecha: fecha1 ).		self assert: ( evento esSemanal )  ! !!PruebasEvento methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:18'!test03EventoCrearUnEventoSimpleConNombreInvitadosAnioMesDiaYHoraObtenerElNombreYVerificarlo	| evento nombreEvento invitados semanas anio mes dia hora fecha |		nombreEvento := 'Juntada'.	invitados := OrderedCollection with: 'Agustin' with: 'Sofia' with: 'Pedro' with: 'Sol'.	semanas := 1.	anio := 2018.	mes := 4.	dia := 21.	hora := 23.	fecha := '4-21-2018 23' asDateAndTime. 		evento := Evento conNombre: nombreEvento 	                 invitados: invitados	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		self assert: ( evento obtenerNombre ) equals: nombreEvento. ! !!PruebasEvento methodsFor: 'tests' stamp: 'MartinStefanelli 9/28/2018 23:12'!test08EventoVerificarQueSeaUnEventoSemanal	| evento nombreEvento invitados semanas anio mes dia hora |		nombreEvento := 'Cine'.	invitados := OrderedCollection with: 'Martin' with: 'Milena' with: 'Gaston' with: 'Daniela'.	semanas := 3.	anio := 2018.	mes := 12.	dia := 1.	hora := 15.		evento := Evento conNombre: nombreEvento 	                 invitados: invitados	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		self assert: ( evento esSemanal ) ! !!PruebasEvento methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:18'!test04EventoCrearUnEventoSimpleConNombreInvitadosAnioMesDiaYHoraYVerificarEsaEntrada	| evento nombreEvento invitados semanas anio mes dia hora fecha |		nombreEvento := 'Cine'.	invitados := OrderedCollection with: 'Agustin' with: 'Sofia' with: 'Pedro'.	semanas := 1.	anio := 2018.	mes := 9.	dia := 6.	hora := 23.	fecha := '9-6-2018 23' asDateAndTime. 		evento := Evento conNombre: nombreEvento 	                 invitados: invitados	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		self assert: ( evento esTuNombre: nombreEvento ).	self assert: ( evento estaInvitado: 'Pedro' ).	self assert: ( evento esValidaLaFecha: fecha ).	self deny: ( evento esSemanal ) ! !!PruebasEvento methodsFor: 'tests' stamp: 'MartinStefanelli 9/28/2018 23:12'!test07EventoVerificarQueUnEventoVacioNoContieneUnaFecha	| evento fecha |		evento := Evento new.	fecha := '7-7-2018 7' asDateAndTime.		self deny: ( evento esValidaLaFecha: fecha ) ! !!PruebasEvento methodsFor: 'tests' stamp: 'MartinStefanelli 9/29/2018 02:23'!test02EventoObtenerElNombreDeUnEventoVacioLanzaUnaExcepcion	| evento |		evento := Evento new.		self should: [ evento obtenerNombre ] raise: NombreNoDefinidoError! !!PruebasEvento methodsFor: 'tests' stamp: 'MartinStefanelli 9/29/2018 02:24'!test09EventoVerificarQueUnaPersonaNoFueInvitadaEnUnEventoVacio	| evento persona |		evento := Evento new.	persona := 'Mateo'.		self deny: ( evento estaInvitado: persona )! !TestCase subclass: #PruebasFecha	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasFecha methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 17:42'!test01FechaDefinirFechaYLuegoObtenerlaParaVerificarla	| fecha anio mes dia hora minutos fechaObtenida fechaEsperada |		anio := 2018.	mes := 10.	dia := 26.	hora := 17.	minutos := 0.	fechaEsperada := '10-26-2018 17' asDateAndTime. 	fecha := Fecha agregarFechasConFormatoDeAnio: anio 		            mes: mes 		            dia: dia 		            hora: hora		            minutos: minutos. 		fechaObtenida := fecha obtenerFecha.		self assert: ( fechaEsperada ) equals: ( fechaObtenida )! !!PruebasFecha methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 01:02'!test02FechaDefinirFechaLuegoObtenerlaYMasTardeIncrementarleDias		| fecha anio mes dia hora minutos diasAIncrementar fechaObtenida fechaIncrementadaObtenida fechaEsperada fechaIncrementadaEsperada coleccionDeFechasEsperadas coleccionDeFechasObtenidas |		anio := 2018.	mes := 10.	dia := 26.	hora := 17.	minutos := 0.	diasAIncrementar := 7.	fechaEsperada := '10-26-2018 17' asDateAndTime.	fechaIncrementadaEsperada := '11-2-2018 17' asDateAndTime. 	coleccionDeFechasEsperadas := OrderedCollection with: fechaEsperada with: fechaIncrementadaEsperada. 	fecha := Fecha agregarFechasConFormatoDeAnio: anio 		            mes: mes 		            dia: dia 		            hora: hora		            minutos: minutos. 		fechaObtenida := fecha obtenerFecha.	fechaIncrementadaObtenida := fecha incrementarleDiasALaFecha: fechaObtenida 	                           xDias: diasAIncrementar.		coleccionDeFechasObtenidas := OrderedCollection with: fechaObtenida with: fechaIncrementadaObtenida.		self assert: ( coleccionDeFechasEsperadas ) equals: ( coleccionDeFechasObtenidas )! !TestCase subclass: #PruebasGestionadorDeEventos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasGestionadorDeEventos methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 13:24'!test03GestionadorDeEventosAgregarUnEventoSemanalConNombreYVerificarQueExiste	| gestionadorDeEventos invitados nombreEvento semanas anio mes dia hora |		gestionadorDeEventos := GestionadorDeEventos new.	invitados := OrderedCollection with: 'Martin' with: 'Diego' with: 'Gaston' with: 'Aula 418'.	nombreEvento := 'Finales julio agosto'.	semanas := 5.	anio := 2018.	mes := 7.	dia := 1.	hora := 18.		gestionadorDeEventos agregarUnEventoConNombre: nombreEvento 	                     invitados: invitados 	                     semanas: semanas 	                     enAnio: anio	                     mes: mes                        dia: dia                         hora: hora.	self assert: ( gestionadorDeEventos existe: nombreEvento )! !!PruebasGestionadorDeEventos methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:17'!test02GestionadorDeEventosAgregarUnEventoSimpleConNombreYVerificarQueExiste	| gestionadorDeEventos semanas invitados nombreEvento anio mes dia hora |	gestionadorDeEventos := GestionadorDeEventos new.	invitados := OrderedCollection with: 'Juan' with: 'Martina'.	nombreEvento := 'Cena en pareja'.	semanas := 1.	anio := 2018.	mes := 9.	dia := 22.	hora := 21.		gestionadorDeEventos agregarUnEventoConNombre: nombreEvento	                     invitados: invitados 	                     semanas: semanas 	                     enAnio: anio	                     mes: mes                        dia: dia                        hora: hora.	self assert: ( gestionadorDeEventos existe: nombreEvento )! !!PruebasGestionadorDeEventos methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:17'!test05GestionadorDeEventosAgregarUnEventoSimpleConNombreVerificarQueExistaRemoverloYVerificarQueNoExisteMas	| gestionadorDeEventos semanas invitados nombreEvento anio mes dia hora |		gestionadorDeEventos := GestionadorDeEventos new.	invitados := OrderedCollection with: 'Mauro' with: 'Belen'.	nombreEvento := 'Cine'.	semanas := 1.	anio := 2018.	mes := 9.	dia := 6.	hora := 23.		gestionadorDeEventos agregarUnEventoConNombre: nombreEvento 	                     invitados: invitados 	                     semanas: semanas 	                     enAnio: anio	                     mes: mes 	                     dia: dia 	                     hora: hora.		self assert: ( gestionadorDeEventos existe: nombreEvento ).		gestionadorDeEventos remover: nombreEvento.		self deny: ( gestionadorDeEventos existe: nombreEvento ) ! !!PruebasGestionadorDeEventos methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 03:19'!test07GestionadorDeEventosAgregarUnEventoSimpleConNombreVerificarQueExisteYObtenerlo	| gestionadorDeEventos evento eventoObtenido semanas invitados nombreEvento anio mes dia hora |	gestionadorDeEventos := GestionadorDeEventos new.	invitados := OrderedCollection with: 'Pedro' with: 'Agustina'.	nombreEvento := 'Cine en pareja'.	semanas := 1.	anio := 2018.	mes := 12.	dia := 19.	hora := 22.		gestionadorDeEventos agregarUnEventoConNombre: nombreEvento	       invitados: invitados 	       semanas: semanas 	       enAnio: anio	       mes: mes          dia: dia          hora: hora.	self assert: ( gestionadorDeEventos existe: nombreEvento ).		eventoObtenido := gestionadorDeEventos obtener: nombreEvento. 	evento := Evento new.		self deny: ( eventoObtenido == evento ). "Son instancias de evento distintas, asi que esta bien que no den igual"	! !!PruebasGestionadorDeEventos methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 13:25'!test06GestionadorDeEventosAgregarUnEventoSemanalConNombreVerificarQueExistaRemoverloYVerificarQueNoExisteMas	| gestionadorDeEventos invitados nombreEvento semanas anio mes dia hora |		gestionadorDeEventos := GestionadorDeEventos new.	invitados := OrderedCollection with: 'Matias' with: 'Juan' with: 'Pedro' with: 'Pablo' with: 'Departamento'.	nombreEvento := 'Vacaciones en mardel'.	semanas := 2.	anio := 2019.	mes := 1.	dia := 12.	hora := 10.		gestionadorDeEventos agregarUnEventoConNombre: nombreEvento 	                     invitados: invitados 	                     semanas: semanas 	                     enAnio: anio	                     mes: mes                        dia: dia                         hora: hora.	self assert: ( gestionadorDeEventos existe: nombreEvento ).		gestionadorDeEventos remover: nombreEvento.		self deny: ( gestionadorDeEventos existe: nombreEvento ) ! !!PruebasGestionadorDeEventos methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 13:24'!test01GestionadorDeEventosVerificarQueNoExisteUnEvento	| gestionadorDeEventos nombreEvento |		gestionadorDeEventos := GestionadorDeEventos new.	nombreEvento := 'Partido de futbol'.		self deny: ( gestionadorDeEventos existe: nombreEvento )! !!PruebasGestionadorDeEventos methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 03:09'!test08GestionadorDeEventosObtenerUnEventoQueNoExisteLanzaUnaExcepcion	| gestionadorDeEventos nombreEvento |		gestionadorDeEventos := GestionadorDeEventos new.	nombreEvento := 'Partido de futbol'.		self should: [ gestionadorDeEventos obtener: nombreEvento ] raise: NoExisteEventoError! !!PruebasGestionadorDeEventos methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 13:25'!test04GestionadorDeEventosRemoverUnEventoQueNoExisteYVerificarExcepcion	| gestionadorDeEventos nombreEvento |		gestionadorDeEventos := GestionadorDeEventos new.	nombreEvento := 'Cena'.		self should: [ gestionadorDeEventos remover: nombreEvento  ] raise: NoExisteEventoError! !TestCase subclass: #PruebasPersona	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasPersona methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:15'!test05PersonaAgregarNombreYEventoYLuegoEliminarlo	| persona evento nombrePersona nombreEvento semanas invitados anio mes dia hora |		nombrePersona := 'Franco'.	nombreEvento := 'Picada y birras'.	semanas := 1.	invitados := OrderedCollection with: nombrePersona with: 'Jose' with: 'Martin' with: 'Francisco'.	anio := 2018.	mes := 11.	dia := 20.	hora := 19.		evento := Evento conNombre: nombreEvento 	                 invitados: invitados	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		persona := Persona conNombre: nombrePersona 	                   yEvento: evento.		self assert: ( persona esTuNombre: nombrePersona ).	self assert: ( persona asistirasAlEvento: nombreEvento ).		persona removerEvento: nombreEvento.		self deny: ( persona asistirasAlEvento: nombreEvento ) ! !!PruebasPersona methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:15'!test04PersonaAgregarNombreYAlgunosEventosYPreguntarleALaPersonaSiSuNombreEsValidoAlIgualQueElNombreDeLosEventos		| persona evento1 evento2 nombrePersona nombreEvento1 nombreEvento2 semanas invitados1 invitados2 anio mes dia hora |		nombrePersona := 'Diego'.	nombreEvento1 := 'Clase de piano'.	nombreEvento2 := 'Cena con amigos'.	semanas := 1.	invitados1 := OrderedCollection with: nombrePersona with: 'Pepe'.	invitados2 := OrderedCollection with: nombrePersona with: 'Santiago' with: 'Pedro' with: 'Mateo'.	anio := 2018.	mes := 5.	dia := 10.	hora := 20.		evento1 := Evento conNombre: nombreEvento1 	                 invitados: invitados1	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		evento2 := Evento conNombre: nombreEvento2 	                 invitados: invitados2	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		persona := Persona new.	persona agregarNombre: nombrePersona.	persona agregarEvento: evento1.	persona agregarEvento: evento2. 		self deny: ( persona esTuNombre: 'Bruno' ).	self deny: ( persona asistirasAlEvento: 'Partido de futbol' ).	self assert: ( persona esTuNombre: nombrePersona ) .	self assert: ( persona asistirasAlEvento: nombreEvento1 ).	self assert: ( persona asistirasAlEvento: nombreEvento2 )! !!PruebasPersona methodsFor: 'tests' stamp: 'MartinStefanelli 9/27/2018 00:24'!test01PersonaPreguntarleAUnaPersonaSiSuNombreEsValido	| persona nombrePersona |		persona := Persona new.	nombrePersona := 'Sandra'.		self deny: ( persona esTuNombre: nombrePersona )! !!PruebasPersona methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:15'!test03PersonaAgregarNombreYEventoYValidarEsaEntrada	| persona evento nombrePersona nombreEvento semanas invitados anio mes dia hora |		nombrePersona := 'Salvador'.	nombreEvento := 'Partida de ajedrez'.	semanas := 1.	invitados := OrderedCollection with: nombrePersona with: 'Bruno'.	anio := 2018.	mes := 3.	dia := 22.	hora := 20.		evento := Evento conNombre: nombreEvento 	                 invitados: invitados	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		persona := Persona conNombre: nombrePersona 	                   yEvento: evento.		self assert: ( persona esTuNombre: nombrePersona ).	self assert: ( persona asistirasAlEvento: nombreEvento ).! !!PruebasPersona methodsFor: 'tests' stamp: 'MartinStefanelli 9/26/2018 21:15'!test02PersonaPreguntarleAUnaPersonaSiAsistiraAUnEventoQueNoTieneAsignado	| persona nombreEvento |		persona := Persona new.	nombreEvento := 'Partido de futbol'.		self deny: ( persona asistirasAlEvento: nombreEvento )! !!PruebasPersona methodsFor: 'tests' stamp: 'MartinStefanelli 10/1/2018 03:03'!test06PersonaAgregarNombreYEventoYVerificarQueLaPersonaEstaOcupadaEnLaFechaDelEvento	| persona evento nombrePersona nombreEvento invitados semanas anio mes dia hora fecha fecha2 |		nombrePersona := 'Diego'.	nombreEvento := 'Cena matrimonial'.	semanas := 1.	invitados := OrderedCollection with: nombrePersona with: 'Lara'.	anio := 2018.	mes := 1.	dia := 22.	hora := 22.	fecha := '1-22-2018 22' asDateAndTime.	fecha2 := '1-22-2018 21' asDateAndTime. 		evento := Evento conNombre: nombreEvento 	                 invitados: invitados	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		persona := Persona conNombre: nombrePersona 	                   yEvento: evento.		self assert: ( persona estaOcupadoEnFecha: fecha ).	self deny: ( persona estaOcupadoEnFecha: fecha2 )! !TestCase subclass: #PruebasRecurso	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasRecurso methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:15'!test05RecursoAgregarNombreYEventoYLuegoEliminarlo	| recurso evento nombreRecurso nombreEvento semanas invitados anio mes dia hora |		nombreRecurso := 'Franco'.	nombreEvento := 'Picada y birras'.	semanas := 1.	invitados := OrderedCollection with: nombreRecurso with: 'Jose' with: 'Martin' with: 'Francisco'.	anio := 2018.	mes := 11.	dia := 20.	hora := 19.		evento := Evento conNombre: nombreEvento 	                 invitados: invitados	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		recurso := Recurso conNombre: nombreRecurso 	                   yEvento: evento.		self assert: ( recurso esTuNombre: nombreRecurso ).	self assert: ( recurso asistirasAlEvento: nombreEvento ).		recurso removerEvento: nombreEvento.		self deny: ( recurso asistirasAlEvento: nombreEvento ) ! !!PruebasRecurso methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:15'!test06RecursoAgregarNombreYEventoYVerificarQueElRecursoEstaOcupadoEnLaFechaDelEvento	| recurso evento nombreRecurso nombreEvento invitados semanas anio mes dia hora fecha fecha2 |		nombreRecurso := 'Parrilla'.	nombreEvento := 'Parrilla con amigos'.	semanas := 1.	invitados := OrderedCollection with: nombreRecurso with: 'Franco' with: 'Cristian' with: 'Agustin' with: 'Matias'.	anio := 2018.	mes := 10.	dia := 17.	hora := 21.	fecha := '10-17-2018 21' asDateAndTime.	fecha2 := '10-17-2018 23' asDateAndTime. 		evento := Evento conNombre: nombreEvento 	                 invitados: invitados	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		recurso := Recurso conNombre: nombreRecurso 	                   yEvento: evento.		self assert: ( recurso estaOcupadoEnFecha: fecha ).	self deny: ( recurso estaOcupadoEnFecha: fecha2 )! !!PruebasRecurso methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 22:41'!test01RecursoPreguntarleAUnRecursoSiSuNombreEsValido	| recurso nombreRecurso |		recurso := Recurso new.	nombreRecurso := 'Parrila'.		self deny: ( recurso esTuNombre: nombreRecurso )! !!PruebasRecurso methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:15'!test04RecursoAgregarNombreYAlgunosEventosYVerificarQueLanzaUnaExcepcionAlAgregarMasDeUno		| recurso evento1 evento2 nombreRecurso nombreEvento1 nombreEvento2 semanas invitados1 invitados2 anio mes dia hora |		nombreRecurso := 'Proyector'.	nombreEvento1 := 'Clase de Algoritmos III'.	nombreEvento2 := 'Clase de Fisica II'.	semanas := 1.	invitados1 := OrderedCollection with: nombreRecurso with: 'Tomas' with: 'Marcio' with: 'Magali'.	invitados2 := OrderedCollection with: nombreRecurso with: 'Martin'.	anio := 2018.	mes := 9.	dia := 27.	hora := 16.		evento1 := Evento conNombre: nombreEvento1 	                 invitados: invitados1	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		evento2 := Evento conNombre: nombreEvento2 	                 invitados: invitados2	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		recurso := Recurso new.	recurso agregarNombre: nombreRecurso.	recurso agregarEvento: evento1.		self should: [ recurso agregarEvento: evento2 ] raise: RecursoOcupadoError.		self deny: ( recurso esTuNombre: 'Cine' ).	self deny: ( recurso asistirasAlEvento: 'Ver pelicula' ).	self assert: ( recurso esTuNombre: nombreRecurso ) .	self assert: ( recurso asistirasAlEvento: nombreEvento1 ).! !!PruebasRecurso methodsFor: 'tests' stamp: 'MartinStefanelli 9/30/2018 23:15'!test03RecursoAgregarNombreYEventoYValidarEsaEntrada	| recurso evento nombreRecurso nombreEvento semanas invitados anio mes dia hora |		nombreRecurso := 'Cama'.	nombreEvento := 'Siesta'.	semanas := 1.	invitados := OrderedCollection with: nombreRecurso with: 'Bruno'.	anio := 2018.	mes := 2.	dia := 22.	hora := 15.		evento := Evento conNombre: nombreEvento 	                 invitados: invitados	                 semanas: semanas 	                 anio: anio 	                 mes: mes 	                 dia: dia 	                 hora: hora.		recurso := Recurso conNombre: nombreRecurso	                   yEvento: evento.		self assert: ( recurso esTuNombre: nombreRecurso).	self assert: ( recurso asistirasAlEvento: nombreEvento ).! !!PruebasRecurso methodsFor: 'tests' stamp: 'MartinStefanelli 9/27/2018 00:28'!test02RecursoPreguntarleAUnRecursoSiAsistiraAUnEventoQueNoTieneAsignado	| recurso nombreEvento |		recurso := Recurso new.	nombreEvento := 'Siesta'.		self deny: ( recurso asistirasAlEvento: nombreEvento )! !